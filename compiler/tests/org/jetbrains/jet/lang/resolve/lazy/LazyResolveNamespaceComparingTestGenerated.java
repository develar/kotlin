/*
 * Copyright 2010-2012 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.jetbrains.jet.lang.resolve.lazy;

import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Suite;

import java.io.File;
import java.lang.reflect.Method;
import java.util.HashSet;
import java.util.Set;

/* This class is generated by LazyResolveTestGenerator. DO NOT MODIFY MANUALLY */
@RunWith(Suite.class)
@Suite.SuiteClasses({
    LazyResolveNamespaceComparingTestGenerated.ReadKotlinBinaryClass.class,    
    LazyResolveNamespaceComparingTestGenerated.ReadJavaBinaryClass.class,    
    LazyResolveNamespaceComparingTestGenerated.LazyResolve.class    
})
public class LazyResolveNamespaceComparingTestGenerated {
    public static class ReadKotlinBinaryClass extends AbstractLazyResolveNamespaceComparingTest {
        @Test
        public void allTestsPresentInReadKotlinBinaryClass() throws Exception {
            allTestsPresent(ReadKotlinBinaryClass.class, new File("compiler/testData/readKotlinBinaryClass"), true);
        }
        
        @Test
        public void testClass() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/class/Class.kt");
        }
        
        @Test
        public void testClassInnerClass() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/class/ClassInnerClass.kt");
        }
        
        @Test
        public void testClassInParam() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/class/ClassInParam.kt");
        }
        
        @Test
        public void testClassOutParam() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/class/ClassOutParam.kt");
        }
        
        @Test
        public void testClassParam() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/class/ClassParam.kt");
        }
        
        @Test
        public void testClassParamReferencesParam() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/class/ClassParamReferencesParam.kt");
        }
        
        @Test
        public void testClassParamReferencesParam2() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/class/ClassParamReferencesParam2.kt");
        }
        
        @Test
        public void testClassParamReferencesSelf() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/class/ClassParamReferencesSelf.kt");
        }
        
        @Test
        public void testClassParamUpperClassBound() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/class/ClassParamUpperClassBound.kt");
        }
        
        @Test
        public void testClassParamUpperClassInterfaceBound() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/class/ClassParamUpperClassInterfaceBound.kt");
        }
        
        @Test
        public void testClassParamUpperInterfaceBound() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/class/ClassParamUpperInterfaceBound.kt");
        }
        
        @Test
        public void testClassParamUpperInterfaceClassBound() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/class/ClassParamUpperInterfaceClassBound.kt");
        }
        
        @Test
        public void testClassTwoParams() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/class/ClassTwoParams.kt");
        }
        
        @Test
        public void testClassTwoParams2() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/class/ClassTwoParams2.kt");
        }
        
        @Test
        public void testInheritClassSimple() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/class/InheritClassSimple.kt");
        }
        
        @Test
        public void testInheritClassWithParam() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/class/InheritClassWithParam.kt");
        }
        
        @Test
        public void testInheritTraitWithParam() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/class/InheritTraitWithParam.kt");
        }
        
        @Test
        public void testInnerClass() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/class/InnerClass.kt");
        }
        
        @Test
        public void testInnerClassExtendInnerClass() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/class/InnerClassExtendInnerClass.kt");
        }
        
        @Test
        public void testTrait() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/class/Trait.kt");
        }
        
        @Test
        public void testClassInParamUsedInFun() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/classFun/ClassInParamUsedInFun.kt");
        }
        
        @Test
        public void testClassParamUsedInFun() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/classFun/ClassParamUsedInFun.kt");
        }
        
        @Test
        public void testFunDelegationToTraitImpl() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/classFun/FunDelegationToTraitImpl.kt");
        }
        
        @Test
        public void testFunInParamSuper() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/classFun/FunInParamSuper.kt");
        }
        
        @Test
        public void testTraitFinalFun() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/classFun/TraitFinalFun.kt");
        }
        
        @Test
        public void testTraitOpenFun() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/classFun/TraitOpenFun.kt");
        }
        
        @Test
        public void testClassObjectDeclaresVal() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/classObject/ClassObjectDeclaresVal.kt");
        }
        
        @Test
        public void testClassObjectDeclaresVar() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/classObject/ClassObjectDeclaresVar.kt");
        }
        
        @Test
        public void testClassObjectExtendsTrait() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/classObject/ClassObjectExtendsTrait.kt");
        }
        
        @Test
        public void testClassObjectExtendsTraitWithTP() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/classObject/ClassObjectExtendsTraitWithTP.kt");
        }
        
        @Test
        public void testSimpleClassObject() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/classObject/SimpleClassObject.kt");
        }
        
        @Test
        public void testConstructor0() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/constructor/Constructor0.kt");
        }
        
        @Test
        public void testConstructor1() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/constructor/Constructor1.kt");
        }
        
        @Test
        public void testConstructor1WithParamDefaultValue() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/constructor/Constructor1WithParamDefaultValue.kt");
        }
        
        @Test
        public void testConstructorCollectionParameter() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/constructor/ConstructorCollectionParameter.kt");
        }
        
        @Test
        public void testConstructorWithTwoTypeParameters() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/constructor/ConstructorWithTwoTypeParameters.kt");
        }
        
        @Test
        public void testConstructorWithTwoTypeParametersAndOneIntValueParameter() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/constructor/ConstructorWithTwoTypeParametersAndOneIntValueParameter.kt");
        }
        
        @Test
        public void testConstructorWithTwoTypeParametersAndOnePValueParameter() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/constructor/ConstructorWithTwoTypeParametersAndOnePValueParameter.kt");
        }
        
        @Test
        public void testConstructorWithTypeParameter() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/constructor/ConstructorWithTypeParameter.kt");
        }
        
        @Test
        public void testConstructorWithTypeParametersEAndOnePValueParameter() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/constructor/ConstructorWithTypeParametersEAndOnePValueParameter.kt");
        }
        
        @Test
        public void testFunClassParamNotNull() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/fun/genericWithoutTypeVariables/FunClassParamNotNull.kt");
        }
        
        @Test
        public void testFunClassParamNullable() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/fun/genericWithoutTypeVariables/FunClassParamNullable.kt");
        }
        
        @Test
        public void testFunParamNullable() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/fun/genericWithoutTypeVariables/FunParamNullable.kt");
        }
        
        @Test
        public void testReturnTypeClassParamNotNull() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/fun/genericWithoutTypeVariables/ReturnTypeClassParamNotNull.kt");
        }
        
        @Test
        public void testReturnTypeClassParamNullable() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/fun/genericWithoutTypeVariables/ReturnTypeClassParamNullable.kt");
        }
        
        @Test
        public void testFunGenericParam() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/fun/genericWithTypeVariables/FunGenericParam.kt");
        }
        
        @Test
        public void testFunInParam() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/fun/genericWithTypeVariables/FunInParam.kt");
        }
        
        @Test
        public void testFunOutParam() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/fun/genericWithTypeVariables/FunOutParam.kt");
        }
        
        @Test
        public void testFunParamParam() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/fun/genericWithTypeVariables/FunParamParam.kt");
        }
        
        @Test
        public void testFunParamParamErased() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/fun/genericWithTypeVariables/FunParamParamErased.kt");
        }
        
        @Test
        public void testFunParamReferencesParam() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/fun/genericWithTypeVariables/FunParamReferencesParam.kt");
        }
        
        @Test
        public void testFunParamReferencesParam2() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/fun/genericWithTypeVariables/FunParamReferencesParam2.kt");
        }
        
        @Test
        public void testFunParamTwoUpperBounds() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/fun/genericWithTypeVariables/FunParamTwoUpperBounds.kt");
        }
        
        @Test
        public void testFunParamUpperClassBound() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/fun/genericWithTypeVariables/FunParamUpperClassBound.kt");
        }
        
        @Test
        public void testFunParamUpperClassInterfaceBound() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/fun/genericWithTypeVariables/FunParamUpperClassInterfaceBound.kt");
        }
        
        @Test
        public void testFunParamUpperInterfaceBound() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/fun/genericWithTypeVariables/FunParamUpperInterfaceBound.kt");
        }
        
        @Test
        public void testFunParamUpperInterfaceClassBound() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/fun/genericWithTypeVariables/FunParamUpperInterfaceClassBound.kt");
        }
        
        @Test
        public void testFunParamVaragParam() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/fun/genericWithTypeVariables/FunParamVaragParam.kt");
        }
        
        @Test
        public void testFunTwoTypeParams() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/fun/genericWithTypeVariables/FunTwoTypeParams.kt");
        }
        
        @Test
        public void testFunTwoTypeParams2() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/fun/genericWithTypeVariables/FunTwoTypeParams2.kt");
        }
        
        @Test
        public void testClassFun() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/fun/nonGeneric/ClassFun.kt");
        }
        
        @Test
        public void testClassFunGetFoo() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/fun/nonGeneric/ClassFunGetFoo.kt");
        }
        
        @Test
        public void testClassFunGetFooSetFoo() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/fun/nonGeneric/ClassFunGetFooSetFoo.kt");
        }
        
        @Test
        public void testClassFunSetFoo() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/fun/nonGeneric/ClassFunSetFoo.kt");
        }
        
        @Test
        public void testExtFun() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/fun/nonGeneric/ExtFun.kt");
        }
        
        @Test
        public void testExtFunInClass() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/fun/nonGeneric/ExtFunInClass.kt");
        }
        
        @Test
        public void testFunDefaultArg() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/fun/nonGeneric/FunDefaultArg.kt");
        }
        
        @Test
        public void testFunParamNotNull() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/fun/nonGeneric/FunParamNotNull.kt");
        }
        
        @Test
        public void testFunVarargInt() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/fun/nonGeneric/FunVarargInt.kt");
        }
        
        @Test
        public void testFunVarargInteger() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/fun/nonGeneric/FunVarargInteger.kt");
        }
        
        @Test
        public void testModifierAbstract() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/fun/nonGeneric/ModifierAbstract.kt");
        }
        
        @Test
        public void testModifierOpen() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/fun/nonGeneric/ModifierOpen.kt");
        }
        
        @Test
        public void testNsFun() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/fun/nonGeneric/NsFun.kt");
        }
        
        @Test
        public void testNsFunGetFoo() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/fun/nonGeneric/NsFunGetFoo.kt");
        }
        
        @Test
        public void testReturnTypeNotNull() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/fun/nonGeneric/ReturnTypeNotNull.kt");
        }
        
        @Test
        public void testReturnTypeNullable() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/fun/nonGeneric/ReturnTypeNullable.kt");
        }
        
        @Test
        public void testClassVal() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/prop/ClassVal.kt");
        }
        
        @Test
        public void testClassValAbstract() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/prop/ClassValAbstract.kt");
        }
        
        @Test
        public void testClassVar() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/prop/ClassVar.kt");
        }
        
        @Test
        public void testCollectionSize() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/prop/CollectionSize.kt");
        }
        
        @Test
        public void testExtValClass() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/prop/ExtValClass.kt");
        }
        
        @Test
        public void testExtValInClass() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/prop/ExtValInClass.kt");
        }
        
        @Test
        public void testExtValInt() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/prop/ExtValInt.kt");
        }
        
        @Test
        public void testExtValIntCharSequence() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/prop/ExtValIntCharSequence.kt");
        }
        
        @Test
        public void testExtValIntCharSequenceQ() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/prop/ExtValIntCharSequenceQ.kt");
        }
        
        @Test
        public void testExtValIntListQOfIntInClass() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/prop/ExtValIntListQOfIntInClass.kt");
        }
        
        @Test
        public void testExtValIntTInClass() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/prop/ExtValIntTInClass.kt");
        }
        
        @Test
        public void testExtValIntTQInClass() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/prop/ExtValIntTQInClass.kt");
        }
        
        @Test
        public void testExtValTIntInClass() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/prop/ExtValTIntInClass.kt");
        }
        
        @Test
        public void testExtVarClass() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/prop/ExtVarClass.kt");
        }
        
        @Test
        public void testExtVarInClass() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/prop/ExtVarInClass.kt");
        }
        
        @Test
        public void testExtVarInt() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/prop/ExtVarInt.kt");
        }
        
        @Test
        public void testExtVarIntTInClass() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/prop/ExtVarIntTInClass.kt");
        }
        
        @Test
        public void testExtVarIntTQInClass() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/prop/ExtVarIntTQInClass.kt");
        }
        
        @Test
        public void testExtVarl() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/prop/ExtVarl.kt");
        }
        
        @Test
        public void testExtVarMapPQInt() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/prop/ExtVarMapPQInt.kt");
        }
        
        @Test
        public void testExtVarTIntInClass() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/prop/ExtVarTIntInClass.kt");
        }
        
        @Test
        public void testExtVarTQIntInClass() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/prop/ExtVarTQIntInClass.kt");
        }
        
        @Test
        public void testNsVal() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/prop/NsVal.kt");
        }
        
        @Test
        public void testNsVar() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/prop/NsVar.kt");
        }
        
        @Test
        public void testOverrideClassVal() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/prop/OverrideClassVal.kt");
        }
        
        @Test
        public void testOverrideTraitVal() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/prop/OverrideTraitVal.kt");
        }
        
        @Test
        public void testPropFromSuperclass() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/prop/PropFromSuperclass.kt");
        }
        
        @Test
        public void testTraitFinalVar() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/prop/TraitFinalVar.kt");
        }
        
        @Test
        public void testTraitOpenVal() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/prop/TraitOpenVal.kt");
        }
        
        @Test
        public void testVarDelegationToTraitImpl() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/prop/VarDelegationToTraitImpl.kt");
        }
        
        @Test
        public void testAny() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/type/Any.kt");
        }
        
        @Test
        public void testAnyQ() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/type/AnyQ.kt");
        }
        
        @Test
        public void testArrayOfInt() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/type/ArrayOfInt.kt");
        }
        
        @Test
        public void testArrayOfInteger() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/type/ArrayOfInteger.kt");
        }
        
        @Test
        public void testArrayOfString() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/type/ArrayOfString.kt");
        }
        
        @Test
        public void testFunction1IntString() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/type/Function1IntString.kt");
        }
        
        @Test
        public void testInt() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/type/Int.kt");
        }
        
        @Test
        public void testIntArray() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/type/IntArray.kt");
        }
        
        @Test
        public void testIntQ() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/type/IntQ.kt");
        }
        
        @Test
        public void testJlInteger() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/type/jlInteger.kt");
        }
        
        @Test
        public void testJlIntegerQ() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/type/jlIntegerQ.kt");
        }
        
        @Test
        public void testJlObject() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/type/jlObject.kt");
        }
        
        @Test
        public void testJlObjectQ() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/type/jlObjectQ.kt");
        }
        
        @Test
        public void testJlString() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/type/jlString.kt");
        }
        
        @Test
        public void testJlStringQ() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/type/jlStringQ.kt");
        }
        
        @Test
        public void testListOfAny() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/type/ListOfAny.kt");
        }
        
        @Test
        public void testListOfAnyQ() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/type/ListOfAnyQ.kt");
        }
        
        @Test
        public void testListOfjlString() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/type/ListOfjlString.kt");
        }
        
        @Test
        public void testListOfStar() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/type/ListOfStar.kt");
        }
        
        @Test
        public void testListOfString() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/type/ListOfString.kt");
        }
        
        @Test
        public void testNothing() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/type/Nothing.kt");
        }
        
        @Test
        public void testNothingQ() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/type/NothingQ.kt");
        }
        
        @Test
        public void testString() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/type/String.kt");
        }
        
        @Test
        public void testStringQ() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/type/StringQ.kt");
        }
        
        @Test
        public void testTuple0() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/type/Tuple0.kt");
        }
        
        @Test
        public void testInternalAbstractTraitMembersOverridden() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/visibility/InternalAbstractTraitMembersOverridden.kt");
        }
        
        @Test
        public void testInternalClass() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/visibility/InternalClass.kt");
        }
        
        @Test
        public void testInternalConstructor() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/visibility/InternalConstructor.kt");
        }
        
        @Test
        public void testInternalTopLevelMembers() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/visibility/InternalTopLevelMembers.kt");
        }
        
        @Test
        public void testInternalTraitMembers() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/visibility/InternalTraitMembers.kt");
        }
        
        @Test
        public void testInternalTraitMembersInherited() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/visibility/InternalTraitMembersInherited.kt");
        }
        
        @Test
        public void testPrivateClass() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/visibility/PrivateClass.kt");
        }
        
        @Test
        public void testPrivateTopLevelFun() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/visibility/PrivateTopLevelFun.kt");
        }
        
        @Test
        public void testPrivateTopLevelVal() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/visibility/PrivateTopLevelVal.kt");
        }
        
        @Test
        public void testTopLevelVarWithPrivateSetter() throws Exception {
            doTestSinglePackage("compiler/testData/readKotlinBinaryClass/visibility/TopLevelVarWithPrivateSetter.kt");
        }
        
        public static void allTestsPresent(Class<?> clazz, File testDataDir, boolean recursive) {
            Set<String> methodNames = new HashSet<String>();
            for (Method method : clazz.getDeclaredMethods()) {
                if (method.isAnnotationPresent(Test.class)) {
                    methodNames.add(method.getName().toLowerCase() + ".kt");
                }
            }
            for (File file : testDataDir.listFiles()) {
                if (file.isDirectory()) {
                    if (recursive) {
                        allTestsPresent(clazz, file, recursive);
                    }
                }
                else {
                    String name = file.getName();
                    if (name.endsWith(".kt") && !methodNames.contains("test" + name.toLowerCase())) {
                        Assert.fail("Test data file missing from the generated test class: " + file + "\nPlease re-run the generator: LazyResolveTestGenerator");
                    }
                }
            }
        }
    }
    
    public static class ReadJavaBinaryClass extends AbstractLazyResolveNamespaceComparingTest {
        @Test
        public void allTestsPresentInReadJavaBinaryClass() throws Exception {
            allTestsPresent(ReadJavaBinaryClass.class, new File("compiler/testData/readJavaBinaryClass"), true);
        }
        
        @Test
        public void testAnnotatedAnnotation() throws Exception {
            doTestSinglePackage("compiler/testData/readJavaBinaryClass/annotation/AnnotatedAnnotation.kt");
        }
        
        @Test
        public void testAnnotatedMethod() throws Exception {
            doTestSinglePackage("compiler/testData/readJavaBinaryClass/annotation/AnnotatedMethod.kt");
        }
        
        @Test
        public void testSimpleAnnotation() throws Exception {
            doTestSinglePackage("compiler/testData/readJavaBinaryClass/annotation/SimpleAnnotation.kt");
        }
        
        @Test
        public void testClassDoesNotOverrideMethod() throws Exception {
            doTestSinglePackage("compiler/testData/readJavaBinaryClass/ClassDoesNotOverrideMethod.kt");
        }
        
        @Test
        public void testClassWithTypeP() throws Exception {
            doTestSinglePackage("compiler/testData/readJavaBinaryClass/ClassWithTypeP.kt");
        }
        
        @Test
        public void testClassWithTypePExtendsIterableP() throws Exception {
            doTestSinglePackage("compiler/testData/readJavaBinaryClass/ClassWithTypePExtendsIterableP.kt");
        }
        
        @Test
        public void testClassWithTypePP() throws Exception {
            doTestSinglePackage("compiler/testData/readJavaBinaryClass/ClassWithTypePP.kt");
        }
        
        @Test
        public void testClassWithTypePRefNext() throws Exception {
            doTestSinglePackage("compiler/testData/readJavaBinaryClass/ClassWithTypePRefNext.kt");
        }
        
        @Test
        public void testClassWithTypePRefSelf() throws Exception {
            doTestSinglePackage("compiler/testData/readJavaBinaryClass/ClassWithTypePRefSelf.kt");
        }
        
        @Test
        public void testConstructorGenericDeep() throws Exception {
            doTestSinglePackage("compiler/testData/readJavaBinaryClass/constructor/ConstructorGenericDeep.kt");
        }
        
        @Test
        public void testConstructorGenericSimple() throws Exception {
            doTestSinglePackage("compiler/testData/readJavaBinaryClass/constructor/ConstructorGenericSimple.kt");
        }
        
        @Test
        public void testConstructorGenericUpperBound() throws Exception {
            doTestSinglePackage("compiler/testData/readJavaBinaryClass/constructor/ConstructorGenericUpperBound.kt");
        }
        
        @Test
        public void testFieldAsVar() throws Exception {
            doTestSinglePackage("compiler/testData/readJavaBinaryClass/FieldAsVar.kt");
        }
        
        @Test
        public void testFieldOfArrayType() throws Exception {
            doTestSinglePackage("compiler/testData/readJavaBinaryClass/FieldOfArrayType.kt");
        }
        
        @Test
        public void testFinalFieldAsVal() throws Exception {
            doTestSinglePackage("compiler/testData/readJavaBinaryClass/FinalFieldAsVal.kt");
        }
        
        @Test
        public void testInnerClass() throws Exception {
            doTestSinglePackage("compiler/testData/readJavaBinaryClass/InnerClass.kt");
        }
        
        @Test
        public void testInnerClassesInGeneric() throws Exception {
            doTestSinglePackage("compiler/testData/readJavaBinaryClass/InnerClassesInGeneric.kt");
        }
        
        @Test
        public void testInnerClassReferencesOuterTP() throws Exception {
            doTestSinglePackage("compiler/testData/readJavaBinaryClass/InnerClassReferencesOuterTP.kt");
        }
        
        @Test
        public void testDifferentGetterAndSetter() throws Exception {
            doTestSinglePackage("compiler/testData/readJavaBinaryClass/javaBean/DifferentGetterAndSetter.kt");
        }
        
        @Test
        public void testJavaBeanAbstractGetter() throws Exception {
            doTestSinglePackage("compiler/testData/readJavaBinaryClass/javaBean/JavaBeanAbstractGetter.kt");
        }
        
        @Test
        public void testJavaBeanVal() throws Exception {
            doTestSinglePackage("compiler/testData/readJavaBinaryClass/javaBean/JavaBeanVal.kt");
        }
        
        @Test
        public void testJavaBeanVar() throws Exception {
            doTestSinglePackage("compiler/testData/readJavaBinaryClass/javaBean/JavaBeanVar.kt");
        }
        
        @Test
        public void testJavaBeanVarOfGenericType() throws Exception {
            doTestSinglePackage("compiler/testData/readJavaBinaryClass/javaBean/JavaBeanVarOfGenericType.kt");
        }
        
        @Test
        public void testTwoSetters() throws Exception {
            doTestSinglePackage("compiler/testData/readJavaBinaryClass/javaBean/TwoSetters.kt");
        }
        
        @Test
        public void testAddingNullability() throws Exception {
            doTestSinglePackage("compiler/testData/readJavaBinaryClass/kotlinSignature/error/AddingNullability.kt");
        }
        
        @Test
        public void testExtraUpperBound() throws Exception {
            doTestSinglePackage("compiler/testData/readJavaBinaryClass/kotlinSignature/error/ExtraUpperBound.kt");
        }
        
        @Test
        public void testMissingUpperBound() throws Exception {
            doTestSinglePackage("compiler/testData/readJavaBinaryClass/kotlinSignature/error/MissingUpperBound.kt");
        }
        
        @Test
        public void testNotVarargReplacedWithVararg() throws Exception {
            doTestSinglePackage("compiler/testData/readJavaBinaryClass/kotlinSignature/error/NotVarargReplacedWithVararg.kt");
        }
        
        @Test
        public void testReturnTypeMissing() throws Exception {
            doTestSinglePackage("compiler/testData/readJavaBinaryClass/kotlinSignature/error/ReturnTypeMissing.kt");
        }
        
        @Test
        public void testSyntaxError() throws Exception {
            doTestSinglePackage("compiler/testData/readJavaBinaryClass/kotlinSignature/error/SyntaxError.kt");
        }
        
        @Test
        public void testVarargReplacedWithNotVararg() throws Exception {
            doTestSinglePackage("compiler/testData/readJavaBinaryClass/kotlinSignature/error/VarargReplacedWithNotVararg.kt");
        }
        
        @Test
        public void testWrongMethodName() throws Exception {
            doTestSinglePackage("compiler/testData/readJavaBinaryClass/kotlinSignature/error/WrongMethodName.kt");
        }
        
        @Test
        public void testWrongReturnTypeStructure() throws Exception {
            doTestSinglePackage("compiler/testData/readJavaBinaryClass/kotlinSignature/error/WrongReturnTypeStructure.kt");
        }
        
        @Test
        public void testWrongTypeName1() throws Exception {
            doTestSinglePackage("compiler/testData/readJavaBinaryClass/kotlinSignature/error/WrongTypeName1.kt");
        }
        
        @Test
        public void testWrongTypeName2() throws Exception {
            doTestSinglePackage("compiler/testData/readJavaBinaryClass/kotlinSignature/error/WrongTypeName2.kt");
        }
        
        @Test
        public void testWrongTypeName3() throws Exception {
            doTestSinglePackage("compiler/testData/readJavaBinaryClass/kotlinSignature/error/WrongTypeName3.kt");
        }
        
        @Test
        public void testWrongTypeParameterBoundStructure1() throws Exception {
            doTestSinglePackage("compiler/testData/readJavaBinaryClass/kotlinSignature/error/WrongTypeParameterBoundStructure1.kt");
        }
        
        @Test
        public void testWrongTypeParameterBoundStructure2() throws Exception {
            doTestSinglePackage("compiler/testData/readJavaBinaryClass/kotlinSignature/error/WrongTypeParameterBoundStructure2.kt");
        }
        
        @Test
        public void testWrongTypeParametersCount() throws Exception {
            doTestSinglePackage("compiler/testData/readJavaBinaryClass/kotlinSignature/error/WrongTypeParametersCount.kt");
        }
        
        @Test
        public void testWrongTypeVariance() throws Exception {
            doTestSinglePackage("compiler/testData/readJavaBinaryClass/kotlinSignature/error/WrongTypeVariance.kt");
        }
        
        @Test
        public void testWrongValueParametersCount() throws Exception {
            doTestSinglePackage("compiler/testData/readJavaBinaryClass/kotlinSignature/error/WrongValueParametersCount.kt");
        }
        
        @Test
        public void testWrongValueParameterStructure1() throws Exception {
            doTestSinglePackage("compiler/testData/readJavaBinaryClass/kotlinSignature/error/WrongValueParameterStructure1.kt");
        }
        
        @Test
        public void testWrongValueParameterStructure2() throws Exception {
            doTestSinglePackage("compiler/testData/readJavaBinaryClass/kotlinSignature/error/WrongValueParameterStructure2.kt");
        }
        
        @Test
        public void testMethodWithFunctionTypes() throws Exception {
            doTestSinglePackage("compiler/testData/readJavaBinaryClass/kotlinSignature/MethodWithFunctionTypes.kt");
        }
        
        @Test
        public void testMethodWithGenerics() throws Exception {
            doTestSinglePackage("compiler/testData/readJavaBinaryClass/kotlinSignature/MethodWithGenerics.kt");
        }
        
        @Test
        public void testMethodWithTupleType() throws Exception {
            doTestSinglePackage("compiler/testData/readJavaBinaryClass/kotlinSignature/MethodWithTupleType.kt");
        }
        
        @Test
        public void testMethodWithTypeParameters() throws Exception {
            doTestSinglePackage("compiler/testData/readJavaBinaryClass/kotlinSignature/MethodWithTypeParameters.kt");
        }
        
        @Test
        public void testMethodWithVararg() throws Exception {
            doTestSinglePackage("compiler/testData/readJavaBinaryClass/kotlinSignature/MethodWithVararg.kt");
        }
        
        @Test
        public void testMethodReferencesOuterClassTP() throws Exception {
            doTestSinglePackage("compiler/testData/readJavaBinaryClass/MethodReferencesOuterClassTP.kt");
        }
        
        @Test
        public void testMethodTypePOneUpperBound() throws Exception {
            doTestSinglePackage("compiler/testData/readJavaBinaryClass/MethodTypePOneUpperBound.kt");
        }
        
        @Test
        public void testMethodTypePTwoUpperBounds() throws Exception {
            doTestSinglePackage("compiler/testData/readJavaBinaryClass/MethodTypePTwoUpperBounds.kt");
        }
        
        @Test
        public void testMethodWithTypeP() throws Exception {
            doTestSinglePackage("compiler/testData/readJavaBinaryClass/MethodWithTypeP.kt");
        }
        
        @Test
        public void testMethodWithTypePP() throws Exception {
            doTestSinglePackage("compiler/testData/readJavaBinaryClass/MethodWithTypePP.kt");
        }
        
        @Test
        public void testMethodWithTypePRefClassP() throws Exception {
            doTestSinglePackage("compiler/testData/readJavaBinaryClass/MethodWithTypePRefClassP.kt");
        }
        
        @Test
        public void testMethosWithPRefTP() throws Exception {
            doTestSinglePackage("compiler/testData/readJavaBinaryClass/MethosWithPRefTP.kt");
        }
        
        @Test
        public void testMyException() throws Exception {
            doTestSinglePackage("compiler/testData/readJavaBinaryClass/MyException.kt");
        }
        
        @Test
        public void testNotNullField() throws Exception {
            doTestSinglePackage("compiler/testData/readJavaBinaryClass/notNull/NotNullField.kt");
        }
        
        @Test
        public void testNotNullMethod() throws Exception {
            doTestSinglePackage("compiler/testData/readJavaBinaryClass/notNull/NotNullMethod.kt");
        }
        
        @Test
        public void testNotNullParameter() throws Exception {
            doTestSinglePackage("compiler/testData/readJavaBinaryClass/notNull/NotNullParameter.kt");
        }
        
        @Test
        public void testSimple() throws Exception {
            doTestSinglePackage("compiler/testData/readJavaBinaryClass/Simple.kt");
        }
        
        @Test
        public void testTwoFields() throws Exception {
            doTestSinglePackage("compiler/testData/readJavaBinaryClass/TwoFields.kt");
        }
        
        @Test
        public void testVarargInt() throws Exception {
            doTestSinglePackage("compiler/testData/readJavaBinaryClass/vararg/VarargInt.kt");
        }
        
        @Test
        public void testVarargString() throws Exception {
            doTestSinglePackage("compiler/testData/readJavaBinaryClass/vararg/VarargString.kt");
        }
        
        public static void allTestsPresent(Class<?> clazz, File testDataDir, boolean recursive) {
            Set<String> methodNames = new HashSet<String>();
            for (Method method : clazz.getDeclaredMethods()) {
                if (method.isAnnotationPresent(Test.class)) {
                    methodNames.add(method.getName().toLowerCase() + ".kt");
                }
            }
            for (File file : testDataDir.listFiles()) {
                if (file.isDirectory()) {
                    if (recursive) {
                        allTestsPresent(clazz, file, recursive);
                    }
                }
                else {
                    String name = file.getName();
                    if (name.endsWith(".kt") && !methodNames.contains("test" + name.toLowerCase())) {
                        Assert.fail("Test data file missing from the generated test class: " + file + "\nPlease re-run the generator: LazyResolveTestGenerator");
                    }
                }
            }
        }
    }
    
    public static class LazyResolve extends AbstractLazyResolveNamespaceComparingTest {
        @Test
        public void allTestsPresentInLazyResolve() throws Exception {
            allTestsPresent(LazyResolve.class, new File("compiler/testData/lazyResolve"), true);
        }
        
        @Test
        public void testClassObject() throws Exception {
            doTest("compiler/testData/lazyResolve/descriptorRenderer/ClassObject.kt");
        }
        
        @Test
        public void testEnum() throws Exception {
            doTest("compiler/testData/lazyResolve/namespaceComparator/enum.kt");
        }
        
        @Test
        public void testGenericFunction() throws Exception {
            doTest("compiler/testData/lazyResolve/namespaceComparator/genericFunction.kt");
        }
        
        @Test
        public void testSimpleClass() throws Exception {
            doTest("compiler/testData/lazyResolve/namespaceComparator/simpleClass.kt");
        }
        
        public static void allTestsPresent(Class<?> clazz, File testDataDir, boolean recursive) {
            Set<String> methodNames = new HashSet<String>();
            for (Method method : clazz.getDeclaredMethods()) {
                if (method.isAnnotationPresent(Test.class)) {
                    methodNames.add(method.getName().toLowerCase() + ".kt");
                }
            }
            for (File file : testDataDir.listFiles()) {
                if (file.isDirectory()) {
                    if (recursive) {
                        allTestsPresent(clazz, file, recursive);
                    }
                }
                else {
                    String name = file.getName();
                    if (name.endsWith(".kt") && !methodNames.contains("test" + name.toLowerCase())) {
                        Assert.fail("Test data file missing from the generated test class: " + file + "\nPlease re-run the generator: LazyResolveTestGenerator");
                    }
                }
            }
        }
    }
    
}
