/*
 * Copyright 2010-2012 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.jetbrains.jet.lang.resolve.lazy;

import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Suite;

import java.io.File;
import java.lang.reflect.Method;
import java.util.HashSet;
import java.util.Set;

/* This class is generated by LazyResolveTestGenerator. DO NOT MODIFY MANUALLY */
@RunWith(Suite.class)
@Suite.SuiteClasses({
    LazyResolveDescriptorRendererTestGenerated.Renderer.class,    
    LazyResolveDescriptorRendererTestGenerated.DescriptorRenderer.class    
})
public class LazyResolveDescriptorRendererTestGenerated {
    public static class Renderer extends AbstractLazyResolveDescriptorRendererTest {
        @Test
        public void testAllFilesPresentInRenderer() throws Exception {
            allTestsPresent(Renderer.class, new File("compiler/testData/renderer"), true);
        }
        
        @Test
        public void testClasses() throws Exception {
            doTest("compiler/testData/renderer/Classes.kt");
        }
        
        @Test
        public void testEnum() throws Exception {
            doTest("compiler/testData/renderer/Enum.kt");
        }
        
        @Test
        public void testErrorType() throws Exception {
            doTest("compiler/testData/renderer/ErrorType.kt");
        }
        
        @Test
        public void testFunctionTypes() throws Exception {
            doTest("compiler/testData/renderer/FunctionTypes.kt");
        }
        
        @Test
        public void testGlobalFunctions() throws Exception {
            doTest("compiler/testData/renderer/GlobalFunctions.kt");
        }
        
        @Test
        public void testGlobalProperties() throws Exception {
            doTest("compiler/testData/renderer/GlobalProperties.kt");
        }
        
        @Test
        public void testInheritedMembersVisibility() throws Exception {
            doTest("compiler/testData/renderer/InheritedMembersVisibility.kt");
        }
        
        @Test
        public void testTupleTypes() throws Exception {
            doTest("compiler/testData/renderer/TupleTypes.kt");
        }
        
        public static void allTestsPresent(Class<?> clazz, File testDataDir, boolean recursive) {
            Set<String> methodNames = new HashSet<String>();
            for (Method method : clazz.getDeclaredMethods()) {
                if (method.isAnnotationPresent(Test.class)) {
                    methodNames.add(method.getName().toLowerCase() + ".kt");
                }
            }
            for (File file : testDataDir.listFiles()) {
                if (file.isDirectory()) {
                    if (recursive) {
                        allTestsPresent(clazz, file, recursive);
                    }
                }
                else {
                    String name = file.getName();
                    if (name.endsWith(".kt") && !methodNames.contains("test" + name.toLowerCase())) {
                        Assert.fail("Test data file missing from the generated test class: " + file + "\nPlease re-run the generator: LazyResolveTestGenerator");
                    }
                }
            }
        }
    }
    
    public static class DescriptorRenderer extends AbstractLazyResolveDescriptorRendererTest {
        @Test
        public void testAllFilesPresentInDescriptorRenderer() throws Exception {
            allTestsPresent(DescriptorRenderer.class, new File("compiler/testData/lazyResolve/descriptorRenderer"), true);
        }
        
        @Test
        public void testClassObject() throws Exception {
            doTest("compiler/testData/lazyResolve/descriptorRenderer/ClassObject.kt");
        }
        
        public static void allTestsPresent(Class<?> clazz, File testDataDir, boolean recursive) {
            Set<String> methodNames = new HashSet<String>();
            for (Method method : clazz.getDeclaredMethods()) {
                if (method.isAnnotationPresent(Test.class)) {
                    methodNames.add(method.getName().toLowerCase() + ".kt");
                }
            }
            for (File file : testDataDir.listFiles()) {
                if (file.isDirectory()) {
                    if (recursive) {
                        allTestsPresent(clazz, file, recursive);
                    }
                }
                else {
                    String name = file.getName();
                    if (name.endsWith(".kt") && !methodNames.contains("test" + name.toLowerCase())) {
                        Assert.fail("Test data file missing from the generated test class: " + file + "\nPlease re-run the generator: LazyResolveTestGenerator");
                    }
                }
            }
        }
    }
    
}
