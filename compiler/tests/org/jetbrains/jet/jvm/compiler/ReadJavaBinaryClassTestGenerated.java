/*
 * Copyright 2010-2012 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.jetbrains.jet.jvm.compiler;

import junit.framework.Assert;
import junit.framework.Test;
import junit.framework.TestSuite;

import java.io.File;
import java.lang.reflect.Method;
import java.util.HashSet;
import java.util.Set;

/* This class is generated by org.jetbrains.jet.jvm.compiler.ReadJavaBinaryClassTestGenerator. DO NOT MODIFY MANUALLY */
public class ReadJavaBinaryClassTestGenerated {
    public static class ReadJavaBinaryClass extends AbstractReadJavaBinaryClassTest {
        public void testAllFilesPresentInReadJavaBinaryClass() throws Exception {
            allTestsPresent(ReadJavaBinaryClass.class, new File("compiler/testData/readJavaBinaryClass"), true);
        }
        
        public void testAnnotatedAnnotation() throws Exception {
            doTest("compiler/testData/readJavaBinaryClass/annotation/AnnotatedAnnotation.java");
        }
        
        public void testAnnotatedMethod() throws Exception {
            doTest("compiler/testData/readJavaBinaryClass/annotation/AnnotatedMethod.java");
        }
        
        public void testSimpleAnnotation() throws Exception {
            doTest("compiler/testData/readJavaBinaryClass/annotation/SimpleAnnotation.java");
        }
        
        public void testClassDoesNotOverrideMethod() throws Exception {
            doTest("compiler/testData/readJavaBinaryClass/ClassDoesNotOverrideMethod.java");
        }
        
        public void testClassWithTypeP() throws Exception {
            doTest("compiler/testData/readJavaBinaryClass/ClassWithTypeP.java");
        }
        
        public void testClassWithTypePExtendsIterableP() throws Exception {
            doTest("compiler/testData/readJavaBinaryClass/ClassWithTypePExtendsIterableP.java");
        }
        
        public void testClassWithTypePP() throws Exception {
            doTest("compiler/testData/readJavaBinaryClass/ClassWithTypePP.java");
        }
        
        public void testClassWithTypePRefNext() throws Exception {
            doTest("compiler/testData/readJavaBinaryClass/ClassWithTypePRefNext.java");
        }
        
        public void testClassWithTypePRefSelf() throws Exception {
            doTest("compiler/testData/readJavaBinaryClass/ClassWithTypePRefSelf.java");
        }
        
        public void testConstructorGenericDeep() throws Exception {
            doTest("compiler/testData/readJavaBinaryClass/constructor/ConstructorGenericDeep.java");
        }
        
        public void testConstructorGenericSimple() throws Exception {
            doTest("compiler/testData/readJavaBinaryClass/constructor/ConstructorGenericSimple.java");
        }
        
        public void testConstructorGenericUpperBound() throws Exception {
            doTest("compiler/testData/readJavaBinaryClass/constructor/ConstructorGenericUpperBound.java");
        }
        
        public void testFieldAsVar() throws Exception {
            doTest("compiler/testData/readJavaBinaryClass/FieldAsVar.java");
        }
        
        public void testFieldOfArrayType() throws Exception {
            doTest("compiler/testData/readJavaBinaryClass/FieldOfArrayType.java");
        }
        
        public void testFinalFieldAsVal() throws Exception {
            doTest("compiler/testData/readJavaBinaryClass/FinalFieldAsVal.java");
        }
        
        public void testInnerClass() throws Exception {
            doTest("compiler/testData/readJavaBinaryClass/InnerClass.java");
        }
        
        public void testInnerClassesInGeneric() throws Exception {
            doTest("compiler/testData/readJavaBinaryClass/InnerClassesInGeneric.java");
        }
        
        public void testInnerClassReferencesOuterTP() throws Exception {
            doTest("compiler/testData/readJavaBinaryClass/InnerClassReferencesOuterTP.java");
        }
        
        public void testDifferentGetterAndSetter() throws Exception {
            doTest("compiler/testData/readJavaBinaryClass/javaBean/DifferentGetterAndSetter.java");
        }
        
        public void testJavaBeanAbstractGetter() throws Exception {
            doTest("compiler/testData/readJavaBinaryClass/javaBean/JavaBeanAbstractGetter.java");
        }
        
        public void testJavaBeanVal() throws Exception {
            doTest("compiler/testData/readJavaBinaryClass/javaBean/JavaBeanVal.java");
        }
        
        public void testJavaBeanVar() throws Exception {
            doTest("compiler/testData/readJavaBinaryClass/javaBean/JavaBeanVar.java");
        }
        
        public void testJavaBeanVarOfGenericType() throws Exception {
            doTest("compiler/testData/readJavaBinaryClass/javaBean/JavaBeanVarOfGenericType.java");
        }
        
        public void testTwoSetters() throws Exception {
            doTest("compiler/testData/readJavaBinaryClass/javaBean/TwoSetters.java");
        }
        
        public void testAddingNullability() throws Exception {
            doTest("compiler/testData/readJavaBinaryClass/kotlinSignature/error/AddingNullability.java");
        }
        
        public void testExtraUpperBound() throws Exception {
            doTest("compiler/testData/readJavaBinaryClass/kotlinSignature/error/ExtraUpperBound.java");
        }
        
        public void testMissingUpperBound() throws Exception {
            doTest("compiler/testData/readJavaBinaryClass/kotlinSignature/error/MissingUpperBound.java");
        }
        
        public void testNotVarargReplacedWithVararg() throws Exception {
            doTest("compiler/testData/readJavaBinaryClass/kotlinSignature/error/NotVarargReplacedWithVararg.java");
        }
        
        public void testReturnTypeMissing() throws Exception {
            doTest("compiler/testData/readJavaBinaryClass/kotlinSignature/error/ReturnTypeMissing.java");
        }
        
        public void testSyntaxError() throws Exception {
            doTest("compiler/testData/readJavaBinaryClass/kotlinSignature/error/SyntaxError.java");
        }
        
        public void testVarargReplacedWithNotVararg() throws Exception {
            doTest("compiler/testData/readJavaBinaryClass/kotlinSignature/error/VarargReplacedWithNotVararg.java");
        }
        
        public void testWrongMethodName() throws Exception {
            doTest("compiler/testData/readJavaBinaryClass/kotlinSignature/error/WrongMethodName.java");
        }
        
        public void testWrongReturnTypeStructure() throws Exception {
            doTest("compiler/testData/readJavaBinaryClass/kotlinSignature/error/WrongReturnTypeStructure.java");
        }
        
        public void testWrongTypeName1() throws Exception {
            doTest("compiler/testData/readJavaBinaryClass/kotlinSignature/error/WrongTypeName1.java");
        }
        
        public void testWrongTypeName2() throws Exception {
            doTest("compiler/testData/readJavaBinaryClass/kotlinSignature/error/WrongTypeName2.java");
        }
        
        public void testWrongTypeName3() throws Exception {
            doTest("compiler/testData/readJavaBinaryClass/kotlinSignature/error/WrongTypeName3.java");
        }
        
        public void testWrongTypeParameterBoundStructure1() throws Exception {
            doTest("compiler/testData/readJavaBinaryClass/kotlinSignature/error/WrongTypeParameterBoundStructure1.java");
        }
        
        public void testWrongTypeParameterBoundStructure2() throws Exception {
            doTest("compiler/testData/readJavaBinaryClass/kotlinSignature/error/WrongTypeParameterBoundStructure2.java");
        }
        
        public void testWrongTypeParametersCount() throws Exception {
            doTest("compiler/testData/readJavaBinaryClass/kotlinSignature/error/WrongTypeParametersCount.java");
        }
        
        public void testWrongTypeVariance() throws Exception {
            doTest("compiler/testData/readJavaBinaryClass/kotlinSignature/error/WrongTypeVariance.java");
        }
        
        public void testWrongValueParametersCount() throws Exception {
            doTest("compiler/testData/readJavaBinaryClass/kotlinSignature/error/WrongValueParametersCount.java");
        }
        
        public void testWrongValueParameterStructure1() throws Exception {
            doTest("compiler/testData/readJavaBinaryClass/kotlinSignature/error/WrongValueParameterStructure1.java");
        }
        
        public void testWrongValueParameterStructure2() throws Exception {
            doTest("compiler/testData/readJavaBinaryClass/kotlinSignature/error/WrongValueParameterStructure2.java");
        }
        
        public void testMethodWithFunctionTypes() throws Exception {
            doTest("compiler/testData/readJavaBinaryClass/kotlinSignature/MethodWithFunctionTypes.java");
        }
        
        public void testMethodWithGenerics() throws Exception {
            doTest("compiler/testData/readJavaBinaryClass/kotlinSignature/MethodWithGenerics.java");
        }
        
        public void testMethodWithTupleType() throws Exception {
            doTest("compiler/testData/readJavaBinaryClass/kotlinSignature/MethodWithTupleType.java");
        }
        
        public void testMethodWithTypeParameters() throws Exception {
            doTest("compiler/testData/readJavaBinaryClass/kotlinSignature/MethodWithTypeParameters.java");
        }
        
        public void testMethodWithVararg() throws Exception {
            doTest("compiler/testData/readJavaBinaryClass/kotlinSignature/MethodWithVararg.java");
        }
        
        public void testMethodReferencesOuterClassTP() throws Exception {
            doTest("compiler/testData/readJavaBinaryClass/MethodReferencesOuterClassTP.java");
        }
        
        public void testMethodTypePOneUpperBound() throws Exception {
            doTest("compiler/testData/readJavaBinaryClass/MethodTypePOneUpperBound.java");
        }
        
        public void testMethodTypePTwoUpperBounds() throws Exception {
            doTest("compiler/testData/readJavaBinaryClass/MethodTypePTwoUpperBounds.java");
        }
        
        public void testMethodWithTypeP() throws Exception {
            doTest("compiler/testData/readJavaBinaryClass/MethodWithTypeP.java");
        }
        
        public void testMethodWithTypePP() throws Exception {
            doTest("compiler/testData/readJavaBinaryClass/MethodWithTypePP.java");
        }
        
        public void testMethodWithTypePRefClassP() throws Exception {
            doTest("compiler/testData/readJavaBinaryClass/MethodWithTypePRefClassP.java");
        }
        
        public void testMethosWithPRefTP() throws Exception {
            doTest("compiler/testData/readJavaBinaryClass/MethosWithPRefTP.java");
        }
        
        public void testModalityOfFakeOverrides() throws Exception {
            doTest("compiler/testData/readJavaBinaryClass/modality/ModalityOfFakeOverrides.java");
        }
        
        public void testMyException() throws Exception {
            doTest("compiler/testData/readJavaBinaryClass/MyException.java");
        }
        
        public void testNotNullField() throws Exception {
            doTest("compiler/testData/readJavaBinaryClass/notNull/NotNullField.java");
        }
        
        public void testNotNullMethod() throws Exception {
            doTest("compiler/testData/readJavaBinaryClass/notNull/NotNullMethod.java");
        }
        
        public void testNotNullParameter() throws Exception {
            doTest("compiler/testData/readJavaBinaryClass/notNull/NotNullParameter.java");
        }
        
        public void testSimple() throws Exception {
            doTest("compiler/testData/readJavaBinaryClass/Simple.java");
        }
        
        public void testTwoFields() throws Exception {
            doTest("compiler/testData/readJavaBinaryClass/TwoFields.java");
        }
        
        public void testVarargInt() throws Exception {
            doTest("compiler/testData/readJavaBinaryClass/vararg/VarargInt.java");
        }
        
        public void testVarargString() throws Exception {
            doTest("compiler/testData/readJavaBinaryClass/vararg/VarargString.java");
        }
        
        public static void allTestsPresent(Class<?> clazz, File testDataDir, boolean recursive) {
            Set<String> methodNames = new HashSet<String>();
            for (Method method : clazz.getDeclaredMethods()) {
                if (method.getName().startsWith("test")) {
                    methodNames.add(method.getName().toLowerCase() + ".java");
                }
            }
            for (File file : testDataDir.listFiles()) {
                if (file.isDirectory()) {
                    if (recursive) {
                        allTestsPresent(clazz, file, recursive);
                    }
                }
                else {
                    String name = file.getName();
                    if (name.endsWith(".java") && !methodNames.contains("test" + name.toLowerCase())) {
                        Assert.fail("Test data file missing from the generated test class: " + file + "\nPlease re-run the generator: org.jetbrains.jet.jvm.compiler.ReadJavaBinaryClassTestGenerator");
                    }
                }
            }
        }
    }
    
    public static Test suite() {
        TestSuite suite = new TestSuite();
        suite.addTestSuite(ReadJavaBinaryClass.class);
        return suite;
    }
}
