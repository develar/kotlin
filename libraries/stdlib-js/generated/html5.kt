//
// NOTE THIS FILE IS AUTO-GENERATED by the GenerateJavaScriptStubs.kt
//

package html

public native trait Blob {
	public val size: Long
	public val `type`: String

	public fun slice(): Blob
}

public native trait FileList {
	public val length: Int

	public fun item(): File
}

public native trait HTMLInputElement {
	public val files: FileList
}

public native trait File : Blob {
	public val name: String
	public val lastModifiedDate: Date
}

public native trait FileReader : EventTarget {
	public val EMPTY: Number = 0
	public val LOADING: Number = 1
	public val DONE: Number = 2
	public val readyState: Number
	public val result: Object
	public val error: Error
	public var onloadstart: ()->Unit
	public var onprogress: ()->Unit
	public var onload: ()->Unit
	public var onabort: ()->Unit
	public var onerror: ()->Unit
	public var onloadend: ()->Unit

	public fun readAsArrayBuffer(): Unit
	public fun readAsBinaryString(): Unit
	public fun readAsText(): Unit
	public fun readAsDataURL(): Unit
	public fun abort(): Unit
}

public native trait Node {
	public val dataset: DOMStringMap
	public val classList: DOMTokenList
}

public native trait DOMStringMap {
}

public native trait DOMTokenList {
	public val length: Number

	public fun contains(): Boolean
	public fun add(): Unit
	public fun remove(): Unit
	public fun toggle(): Unit
}

public native trait DatabaseCallback {
	public fun handleEvent(): Unit
}

public native trait Notification : EventTarget {
	public var ondisplay: ()->Unit
	public var onerror: ()->Unit
	public var onclose: ()->Unit

	public fun show(): Unit
	public fun cancel(): Unit
}

public native trait MediaError {
}

public native trait HTMLMediaElement : HTMLElement {
	public val error: MediaError
	public var src: String
	public val currentSrc: String
	public val NETWORK_EMPTY: Number = 0
	public val NETWORK_IDLE: Number = 1
	public val NETWORK_LOADING: Number = 2
	public val NETWORK_NO_SOURCE: Number = 3
	public val networkState: Number
	public var preload: String
	public val buffered: TimeRanges
	public val HAVE_NOTHING: Number = 0
	public val HAVE_METADATA: Number = 1
	public val HAVE_CURRENT_DATA: Number = 2
	public val HAVE_FUTURE_DATA: Number = 3
	public val HAVE_ENOUGH_DATA: Number = 4
	public val readyState: Number
	public val seeking: Boolean
	public var currentTime: Number
	public val startTime: Number
	public val duration: Number
	public val paused: Boolean
	public var defaultPlaybackRate: Number
	public var playbackRate: Number
	public val played: TimeRanges
	public val seekable: TimeRanges
	public val ended: Boolean
	public var autoplay: Boolean
	public var loop: Boolean
	public var controls: Boolean
	public var volume: Number
	public var muted: Boolean
	public val tracks: Array

	public fun load(): Unit
	public fun canPlayType(): String
	public fun play(): Unit
	public fun pause(): Unit
	public fun addTrack(): MutableTimedTrack
}

public native trait MediaError {
	public val MEDIA_ERR_ABORTED: Number = 1
	public val MEDIA_ERR_NETWORK: Number = 2
	public val MEDIA_ERR_DECODE: Number = 3
	public val MEDIA_ERR_SRC_NOT_SUPPORTED: Number = 4
	public val code: Number
}

public native trait TimeRanges {
	public val length: Number

	public fun start(): Number
	public fun end(): Number
}

public native trait TimedTrack {
	public val kind: String
	public val label: String
	public val language: String
	public val NONE: Number = 0
	public val LOADING: Number = 1
	public val LOADED: Number = 2
	public val ERROR: Number = 3
	public val readyState: Number
	public val onload: ()->Unit
	public val onerror: ()->Unit
	public val OFF: Number = 0
	public val HIDDEN: Number = 1
	public val SHOWING: Number = 2
	public var mode: Number
	public val cues: TimedTrackCueList
	public val activeCues: TimedTrackCueList
	public val onentercue: ()->Unit
	public val onexitcue: ()->Unit
}

public native trait MutableTimedTrack : TimedTrack {
	public fun addCue(): Unit
	public fun removeCue(): Unit
}

public native trait TimedTrackCue {
	public val track: TimedTrack
	public val id: String
	public val startTime: Number
	public val endTime: Number
	public val pauseOnExit: Boolean
	public val direction: String
	public val snapToLines: Boolean
	public val linePosition: Number
	public val textPosition: Number
	public val size: Number
	public val alignment: String
	public val voice: String

	public fun getCueAsSource(): String
	public fun getCueAsHTML(): DocumentFragment
	public fun TimedTrackCue(): TimedTrackCue
}

public native trait TimedTrackCueList {
	public val length: Number

	public fun getCueById(): TimedTrackCue
}

public native trait HTMLVideoElement : HTMLMediaElement {
	public var width: Number
	public var height: Number
	public val videoWidth: Number
	public val videoHeight: Number
	public var poster: String
}

public native trait Database {
	public val version: String

	public fun transaction(): Unit
	public fun readTransaction(): Unit
	public fun changeVersion(): Unit
}

public native trait SQLVoidCallback {
	public fun handleEvent(): Unit
}

public native trait SQLTransactionCallback {
	public fun handleEvent(): Unit
}

public native trait SQLTransactionErrorCallback {
	public fun handleEvent(): Unit
}

public native trait SQLTransaction {
	public fun executeSql(): Unit
}

public native trait SQLStatementCallback {
	public fun handleEvent(): Unit
}

public native trait SQLStatementErrorCallback {
	public fun handleEvent(): Boolean
}

public native trait SQLTransactionSyncCallback {
	public fun handleEvent(): Unit
}

public native trait SQLTransactionSync {
	public fun executeSql(): SQLResultSet
}

public native trait SQLResultSet {
	public val insertId: Number
	public val rowsAffected: Number
	public val rows: SQLResultSetRowList
}

public native trait SQLResultSetRowList {
	public val length: Number

	public fun item(): Unit
}

public native trait SQLError {
	public val UNKNOWN_ERR: Number = 0
	public val DATABASE_ERR: Number = 1
	public val VERSION_ERR: Number = 2
	public val TOO_LARGE_ERR: Number = 3
	public val QUOTA_ERR: Number = 4
	public val SYNTAX_ERR: Number = 5
	public val CONSTRAINT_ERR: Number = 6
	public val TIMEOUT_ERR: Number = 7
	public val code: Number
	public val message: String
}

public native trait MessageEvent : Event {
	public val data: String
	public val origin: String
	public val lastEventId: String
	public val source: Window
	public val ports: MessagePortArray
}

public native trait History {
	public val length: Number
	public val state: Object

	public fun pushState(): Unit
	public fun replaceState(): Unit
}

public native trait Location {
	public fun assign(): Unit
	public fun resolveURL(): String
}

public native trait SQLException : Error {
	public val UNKNOWN_ERR: Number = 0
	public val DATABASE_ERR: Number = 1
	public val VERSION_ERR: Number = 2
	public val TOO_LARGE_ERR: Number = 3
	public val QUOTA_ERR: Number = 4
	public val SYNTAX_ERR: Number = 5
	public val CONSTRAINT_ERR: Number = 6
	public val TIMEOUT_ERR: Number = 7
	public val code: Number
	public val message: String
}

public native trait HTMLImageElement {
	public var crossOrigin: String
}

public native trait HTMLCanvasElement : HtmlElement {
	public var width: Number
	public var height: Number

	public fun getContext(): CanvasRenderingContext2D
	public fun toDataURL(): String
}

public native trait CanvasRenderingContext2D {
	public val canvas: HTMLCanvasElement
	public var globalAlpha: Number
	public var globalCompositeOperation: String
	public var fillStyle: Unit
	public var strokeStyle: Unit
	public var lineWidth: Number
	public var lineCap: String
	public var lineJoin: String
	public var miterLimit: Number
	public var shadowOffsetX: Number
	public var shadowOffsetY: Number
	public var shadowBlur: Number
	public var shadowColor: String
	public var font: String
	public var textAlign: String
	public var textBaseline: String

	public fun save(): Unit
	public fun restore(): Unit
	public fun scale(): Unit
	public fun rotate(): Unit
	public fun translate(): Unit
	public fun transform(): Unit
	public fun setTransform(): Unit
	public fun createLinearGradient(): CanvasGradient
	public fun createRadialGradient(): CanvasGradient
	public fun createPattern(): CanvasPattern
	public fun clearRect(): Unit
	public fun fillRect(): Unit
	public fun strokeRect(): Unit
	public fun beginPath(): Unit
	public fun closePath(): Unit
	public fun moveTo(): Unit
	public fun lineTo(): Unit
	public fun quadraticCurveTo(): Unit
	public fun bezierCurveTo(): Unit
	public fun arcTo(): Unit
	public fun rect(): Unit
	public fun arc(): Unit
	public fun fill(): Unit
	public fun stroke(): Unit
	public fun clip(): Unit
	public fun isPointInPath(): Boolean
	public fun drawFocusRing(): Unit
	public fun fillText(): Unit
	public fun strokeText(): Unit
	public fun measureText(): TextMetrics
	public fun drawImage(): Unit
	public fun createImageData(): ImageData
	public fun getImageData(): ImageData
	public fun putImageData(): Unit
}

public native trait CanvasGradient {
	public fun addColorStop(): Unit
}

public native trait ImageData {
	public val data: CanvasPixelArray
	public val width: Number
	public val height: Number
}

public native trait CanvasPixelArray {
	public val length: Number
}

public native trait TextMetrics {
	public val width: Number
}

public native trait window {
	public val navigator: WorkerNavigator
	public val localStorage: Storage
	public val sessionStorage: Storage

	public fun webkitRequestAnimationFrame(): Number
	public fun webkitCancelRequestAnimationFrame(): Unit
	public fun msRequestAnimationFrame(): Number
	public fun msCancelRequestAnimationFrame(): Unit
	public fun oRequestAnimationFrame(): Number
	public fun oCancelRequestAnimationFrame(): Unit
	public fun mozRequestAnimationFrame(): Number
	public fun mozCancelRequestAnimationFrame(): Unit
	public fun requestAnimationFrame(): Number
	public fun cancelRequestAnimationFrame(): Unit
	public fun importScripts(): Unit
	public fun openDatabase(): Database
	public fun openDatabaseSync(): Database
}

public native trait WorkerNavigator {
}

public native trait AbstractWorker {
	public var onerror: ()->Unit
}

public native trait Worker : AbstractWorker {
	public var onmessage: ()->Unit

	public fun terminate(): Unit
	public fun postMessage(): Unit
}

public native trait SharedWorker : AbstractWorker {
	public val port: ()->Unit
}

public native trait Storage {
	public val length: Number

	public fun key(): String
	public fun getItem(): Unit
	public fun setItem(): Unit
	public fun removeItem(): Unit
	public fun clear(): Unit
}

public native trait WebSocket {
	public var url: String
	public val CONNECTING: Number = 0
	public val OPEN: Number = 1
	public val CLOSING: Number = 2
	public val CLOSED: Number = 3
	public val readyState: Number
	public val bufferedAmount: Number
	public var onopen: ()->Unit
	public var onmessage: ()->Unit
	public var onerror: ()->Unit
	public var onclose: ()->Unit

	public fun send(): Boolean
	public fun close(): Unit
}

public native trait ArrayBuffer {
	public var byteLength: Number

	public fun __constructor__(): Unit
}

public native trait DataView {
	public val buffer: ArrayBuffer
	public val byteOffset: Number
	public val byteLength: Number

	public fun __constructor__(): Unit
	public fun getInt8(): Number
}

public native trait ArrayBufferView {
	public val buffer: ArrayBuffer
	public val byteOffset: Number
	public val byteLength: Number

	public fun __constructor__(): Unit
}

public native trait Int8Array : ArrayBufferView {
	public val length: Unit
	public val BYTES_PER_ELEMENT: Number = 8

	public fun __constructor__(): Unit
	public fun set(): Unit
	public fun subarray(): $__Type__$
}

public native trait Uint8Array : ArrayBufferView {
	public val length: Unit
	public val BYTES_PER_ELEMENT: Number = 8

	public fun __constructor__(): Unit
	public fun set(): Unit
	public fun subarray(): $__Type__$
}

public native trait Int16Array : ArrayBufferView {
	public val length: Unit
	public val BYTES_PER_ELEMENT: Number = 16

	public fun __constructor__(): Unit
	public fun set(): Unit
	public fun subarray(): $__Type__$
}

public native trait Uint16Array : ArrayBufferView {
	public val length: Unit
	public val BYTES_PER_ELEMENT: Number = 16

	public fun __constructor__(): Unit
	public fun set(): Unit
	public fun subarray(): $__Type__$
}

public native trait Int32Array : ArrayBufferView {
	public val length: Unit
	public val BYTES_PER_ELEMENT: Number = 32

	public fun __constructor__(): Unit
	public fun set(): Unit
	public fun subarray(): $__Type__$
}

public native trait Uint32Array : ArrayBufferView {
	public val length: Unit
	public val BYTES_PER_ELEMENT: Number = 32

	public fun __constructor__(): Unit
	public fun set(): Unit
	public fun subarray(): $__Type__$
}

public native trait Float32Array : ArrayBufferView {
	public val length: Unit
	public val BYTES_PER_ELEMENT: Number = 32

	public fun __constructor__(): Unit
	public fun set(): Unit
	public fun subarray(): $__Type__$
}

public native trait Float64Array : ArrayBufferView {
	public val length: Unit
	public val BYTES_PER_ELEMENT: Number = 64

	public fun __constructor__(): Unit
	public fun set(): Unit
	public fun subarray(): $__Type__$
}

public native trait Geolocation {
	public fun getCurrentPosition(): Unit
	public fun watchPosition(): Number
	public fun clearWatch(): Unit
}

public native trait Navigator {
	public val geolocation: Geolocation
}

public native trait PositionOptions {
	public var enableHighAccuracy: Boolean
	public var timeout: Number
	public var maximumAge: Number
}

public native trait Position {
	public var coords: Coordinates
	public var timestamp: Number
}

public native trait Coordinates {
	public val latitude: Number
	public val longitude: Number
	public val altitude: Number
	public val accuracy: Number
	public val altitudeAccuracy: Number
	public val heading: Number
	public val speed: Number
}

public native trait PositionError {
	public val PERMISSION_DENIED: Number = 1
	public val POSITION_UNAVAILABLE: Number = 2
	public val TIMEOUT: Number = 3
	public val code: Number
	public val message: String
}

public native trait XMLHttpRequest {
	public var responseType: String
	public var response: Object
}

public native trait FormData {
	public fun append(): Unit
}